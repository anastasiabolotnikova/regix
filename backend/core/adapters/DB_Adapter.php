<?php
/**
 * @file DB_Adapter.php
 * 
 * Contains abstract database adapter and exceptions used by it.
 */

/**
 * Exception that should be thrown when it is impossible to connect to the DB.
 */
class DBConnectionException extends Exception {}


/**
 * Exception that should be thrown when it is impossible to execute a request.
 */
class DBRequestException extends Exception {}

/**
 * Abstract database adapter that can be used by all components.
 * 
 * Mathods in this abstract class should be used by system core and components
 * instead of directly accessing the database. When a component needs
 * a new method, it *must be added to this interface and all existing
 * subclasses.*
 * 
 * Subclasses may be added into the same directory with this class.
 * Note that you must also add code for loading this new adapter into
 * system bootstrap file (index.php). See MySQL_Adapter for reference
 * implementation.
 *
 */
abstract class DB_Adapter {
	
	/**
	 * @brief Regix configuration object.
	 * @var Config
	 */
	protected $config;
	
	/**
	 * Initialize database adapter.
	 * 
	 * @param Config $config Should contain at least following values:
	 * * db_host - database server address;
	 * * db_user - database user;
	 * * db_password - password for database user;
	 * * db_name - database (schema) name;
	 * * db_port - port of the database server.
	 */
	public function __construct($config) {
		$this->config = $config;
	}
	
	/**
	 * Closes connection and destroys adapter.
	 */
	public function __destruct() {
		// If connection still open, close it.
		$this->close();
	}
	
	/**
	 * Create a new connection to the database.
	 * 
	 * This method should be called *before* any of the others.
	 * 
	 * ** NB! You probably do not need to call this method manually, as this is
	 * done by the bootloader! **
	 * 
	 * @throws DBConnectionException when connection to the database fails.
	 */
	abstract public function connect();
	
	/**
	 * Close connection with the database.
	 * 
	 * This method should be called *after* all requests to the database are
	 * done.
	 * 
	 * ** NB! You probably do not need to call this method manually, as this is
	 * done by the bootloader! **
	 */
	abstract public function close();
	
	abstract public function get_profile_data($id);
	
	/**
	 * Returns last ID generated by the database for previous insert operation.
	 */
	abstract public function get_last_id();
	
	/**
	 * Select values from DB table with conditions.
	 * 
	 * @param string $table Table to use for data selection.
	 * 
	 * @param array $fields Array of field (column) names to be selected.
	 * 
	 * @param string $types Types of fields to be selected.
	 * String should contain only the following letters:
	 * * 's' for string;
	 * * 'i' for integer;
	 * * 'd' for double;
	 * * 'b' for binary.
	 * Number of letters *MUST EXACTLY MATCH* number of fields to be seledted.
	 * @example If you want to select 4 fields - an integer, two strings and
	 * a double, for @a $types use string "issd".
	 * 
	 * @param array $filters Array containing select query criteria.
	 * This should be an associative array, where keys (strings) are field
	 * (column) names and values (strings, integers, doubles or other) are
	 * expected values.
	 * 
	 * @param number $limit How many rows should be maximally selected. 0 by
	 * default.
	 */
	abstract public function select($table, $fields, $types, $filters,
			$limit = 0);
	
	/**
	 * Insert data into table.
	 * 
	 * @param string $table Table to use for data insertion.
	 * @param array $data Array with field-value pairs to be inserted.
	 * {
	 *     "field1" => "value1",
	 *     ...
	 * }
	 * 
	 * Table and field names should be alphanumerical strings (can contain dots
	 * and underscores).
	 */
	abstract public function insert($table, $data);
}